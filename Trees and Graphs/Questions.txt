1. Implement a function to check if a binary tree is balanced. For the purposes of this question, a balanced tree is defined to be a tree such that the heights of the two subtrees of any node never differ by more than one.

2. Given a directed graph, design an algorithm to find out whether there is a route between two nodes.

3. Given a sorted (increasingorder) array with unique integer elements, write an algorithm to create a binary search tree with minimal height.

4. Given a binary tree, design an algorithm which creates a linked list of all the nodes at each depth (e.g., if you have a tree with depth D,you'll have D linked lists).
Implement a function to check if a binary tree is a binary search tree.

5. Write an algorithm to find the'next'node (i.e., in-order successor) of a given node in a binary search tree. You may assume that each node has a link to its parent.

6. Design an algorithm and write code to find the first common ancestor of two nodes in a binary tree. Avoid storing additional nodes in a data structure. NOTE: This is not necessarily a binary search tree.

7. You have two very large binary trees: T l, with millions of nodes, and T2, with hundreds of nodes. Create an algorithm to decide ifT2 is a subtree of Tl.
A tree T2 is a subtree of Tl if there exists a node n in Tl such that the subtree of n is identical to T2. That is, if you cut off the tree at node n, the two trees would be identical.

8. You are given a binary tree in which each node contains a value. Design an algo- rithm to print all paths which sum to a given value. The path does not need to start or end at the root or a leaf.